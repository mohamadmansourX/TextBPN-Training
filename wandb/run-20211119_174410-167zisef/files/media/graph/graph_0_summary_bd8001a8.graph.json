{"format": "torch", "nodes": [{"name": "fpn", "id": 140502256250552, "class_name": "FPN(\n  (backbone): ResNet(\n    (stage1): Sequential(\n      (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n    )\n    (stage2): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (stage3): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (3): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (stage4): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (3): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (4): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (5): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (stage5): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (up2): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n  )\n  (deconv5): ConvTranspose2d(2048, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n  (merge4): UpBlok(\n    (conv1x1): Conv2d(1280, 128, kernel_size=(1, 1), stride=(1, 1))\n    (conv3x3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (deconv): ConvTranspose2d(128, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n  )\n  (merge3): UpBlok(\n    (conv1x1): Conv2d(640, 64, kernel_size=(1, 1), stride=(1, 1))\n    (conv3x3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (deconv): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n  )\n  (merge2): UpBlok(\n    (conv1x1): Conv2d(320, 32, kernel_size=(1, 1), stride=(1, 1))\n    (conv3x3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (deconv): ConvTranspose2d(32, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n  )\n  (merge1): UpBlok(\n    (conv1x1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))\n    (conv3x3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (deconv): ConvTranspose2d(32, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n  )\n)", "parameters": [["backbone.stage1.0.weight", [64, 3, 7, 7]], ["backbone.stage1.1.weight", [64]], ["backbone.stage1.1.bias", [64]], ["backbone.stage2.0.conv1.weight", [64, 64, 1, 1]], ["backbone.stage2.0.bn1.weight", [64]], ["backbone.stage2.0.bn1.bias", [64]], ["backbone.stage2.0.conv2.weight", [64, 64, 3, 3]], ["backbone.stage2.0.bn2.weight", [64]], ["backbone.stage2.0.bn2.bias", [64]], ["backbone.stage2.0.conv3.weight", [256, 64, 1, 1]], ["backbone.stage2.0.bn3.weight", [256]], ["backbone.stage2.0.bn3.bias", [256]], ["backbone.stage2.0.downsample.0.weight", [256, 64, 1, 1]], ["backbone.stage2.0.downsample.1.weight", [256]], ["backbone.stage2.0.downsample.1.bias", [256]], ["backbone.stage2.1.conv1.weight", [64, 256, 1, 1]], ["backbone.stage2.1.bn1.weight", [64]], ["backbone.stage2.1.bn1.bias", [64]], ["backbone.stage2.1.conv2.weight", [64, 64, 3, 3]], ["backbone.stage2.1.bn2.weight", [64]], ["backbone.stage2.1.bn2.bias", [64]], ["backbone.stage2.1.conv3.weight", [256, 64, 1, 1]], ["backbone.stage2.1.bn3.weight", [256]], ["backbone.stage2.1.bn3.bias", [256]], ["backbone.stage2.2.conv1.weight", [64, 256, 1, 1]], ["backbone.stage2.2.bn1.weight", [64]], ["backbone.stage2.2.bn1.bias", [64]], ["backbone.stage2.2.conv2.weight", [64, 64, 3, 3]], ["backbone.stage2.2.bn2.weight", [64]], ["backbone.stage2.2.bn2.bias", [64]], ["backbone.stage2.2.conv3.weight", [256, 64, 1, 1]], ["backbone.stage2.2.bn3.weight", [256]], ["backbone.stage2.2.bn3.bias", [256]], ["backbone.stage3.0.conv1.weight", [128, 256, 1, 1]], ["backbone.stage3.0.bn1.weight", [128]], ["backbone.stage3.0.bn1.bias", [128]], ["backbone.stage3.0.conv2.weight", [128, 128, 3, 3]], ["backbone.stage3.0.bn2.weight", [128]], ["backbone.stage3.0.bn2.bias", [128]], ["backbone.stage3.0.conv3.weight", [512, 128, 1, 1]], ["backbone.stage3.0.bn3.weight", [512]], ["backbone.stage3.0.bn3.bias", [512]], ["backbone.stage3.0.downsample.0.weight", [512, 256, 1, 1]], ["backbone.stage3.0.downsample.1.weight", [512]], ["backbone.stage3.0.downsample.1.bias", [512]], ["backbone.stage3.1.conv1.weight", [128, 512, 1, 1]], ["backbone.stage3.1.bn1.weight", [128]], ["backbone.stage3.1.bn1.bias", [128]], ["backbone.stage3.1.conv2.weight", [128, 128, 3, 3]], ["backbone.stage3.1.bn2.weight", [128]], ["backbone.stage3.1.bn2.bias", [128]], ["backbone.stage3.1.conv3.weight", [512, 128, 1, 1]], ["backbone.stage3.1.bn3.weight", [512]], ["backbone.stage3.1.bn3.bias", [512]], ["backbone.stage3.2.conv1.weight", [128, 512, 1, 1]], ["backbone.stage3.2.bn1.weight", [128]], ["backbone.stage3.2.bn1.bias", [128]], ["backbone.stage3.2.conv2.weight", [128, 128, 3, 3]], ["backbone.stage3.2.bn2.weight", [128]], ["backbone.stage3.2.bn2.bias", [128]], ["backbone.stage3.2.conv3.weight", [512, 128, 1, 1]], ["backbone.stage3.2.bn3.weight", [512]], ["backbone.stage3.2.bn3.bias", [512]], ["backbone.stage3.3.conv1.weight", [128, 512, 1, 1]], ["backbone.stage3.3.bn1.weight", [128]], ["backbone.stage3.3.bn1.bias", [128]], ["backbone.stage3.3.conv2.weight", [128, 128, 3, 3]], ["backbone.stage3.3.bn2.weight", [128]], ["backbone.stage3.3.bn2.bias", [128]], ["backbone.stage3.3.conv3.weight", [512, 128, 1, 1]], ["backbone.stage3.3.bn3.weight", [512]], ["backbone.stage3.3.bn3.bias", [512]], ["backbone.stage4.0.conv1.weight", [256, 512, 1, 1]], ["backbone.stage4.0.bn1.weight", [256]], ["backbone.stage4.0.bn1.bias", [256]], ["backbone.stage4.0.conv2.weight", [256, 256, 3, 3]], ["backbone.stage4.0.bn2.weight", [256]], ["backbone.stage4.0.bn2.bias", [256]], ["backbone.stage4.0.conv3.weight", [1024, 256, 1, 1]], ["backbone.stage4.0.bn3.weight", [1024]], ["backbone.stage4.0.bn3.bias", [1024]], ["backbone.stage4.0.downsample.0.weight", [1024, 512, 1, 1]], ["backbone.stage4.0.downsample.1.weight", [1024]], ["backbone.stage4.0.downsample.1.bias", [1024]], ["backbone.stage4.1.conv1.weight", [256, 1024, 1, 1]], ["backbone.stage4.1.bn1.weight", [256]], ["backbone.stage4.1.bn1.bias", [256]], ["backbone.stage4.1.conv2.weight", [256, 256, 3, 3]], ["backbone.stage4.1.bn2.weight", [256]], ["backbone.stage4.1.bn2.bias", [256]], ["backbone.stage4.1.conv3.weight", [1024, 256, 1, 1]], ["backbone.stage4.1.bn3.weight", [1024]], ["backbone.stage4.1.bn3.bias", [1024]], ["backbone.stage4.2.conv1.weight", [256, 1024, 1, 1]], ["backbone.stage4.2.bn1.weight", [256]], ["backbone.stage4.2.bn1.bias", [256]], ["backbone.stage4.2.conv2.weight", [256, 256, 3, 3]], ["backbone.stage4.2.bn2.weight", [256]], ["backbone.stage4.2.bn2.bias", [256]], ["backbone.stage4.2.conv3.weight", [1024, 256, 1, 1]], ["backbone.stage4.2.bn3.weight", [1024]], ["backbone.stage4.2.bn3.bias", [1024]], ["backbone.stage4.3.conv1.weight", [256, 1024, 1, 1]], ["backbone.stage4.3.bn1.weight", [256]], ["backbone.stage4.3.bn1.bias", [256]], ["backbone.stage4.3.conv2.weight", [256, 256, 3, 3]], ["backbone.stage4.3.bn2.weight", [256]], ["backbone.stage4.3.bn2.bias", [256]], ["backbone.stage4.3.conv3.weight", [1024, 256, 1, 1]], ["backbone.stage4.3.bn3.weight", [1024]], ["backbone.stage4.3.bn3.bias", [1024]], ["backbone.stage4.4.conv1.weight", [256, 1024, 1, 1]], ["backbone.stage4.4.bn1.weight", [256]], ["backbone.stage4.4.bn1.bias", [256]], ["backbone.stage4.4.conv2.weight", [256, 256, 3, 3]], ["backbone.stage4.4.bn2.weight", [256]], ["backbone.stage4.4.bn2.bias", [256]], ["backbone.stage4.4.conv3.weight", [1024, 256, 1, 1]], ["backbone.stage4.4.bn3.weight", [1024]], ["backbone.stage4.4.bn3.bias", [1024]], ["backbone.stage4.5.conv1.weight", [256, 1024, 1, 1]], ["backbone.stage4.5.bn1.weight", [256]], ["backbone.stage4.5.bn1.bias", [256]], ["backbone.stage4.5.conv2.weight", [256, 256, 3, 3]], ["backbone.stage4.5.bn2.weight", [256]], ["backbone.stage4.5.bn2.bias", [256]], ["backbone.stage4.5.conv3.weight", [1024, 256, 1, 1]], ["backbone.stage4.5.bn3.weight", [1024]], ["backbone.stage4.5.bn3.bias", [1024]], ["backbone.stage5.0.conv1.weight", [512, 1024, 1, 1]], ["backbone.stage5.0.bn1.weight", [512]], ["backbone.stage5.0.bn1.bias", [512]], ["backbone.stage5.0.conv2.weight", [512, 512, 3, 3]], ["backbone.stage5.0.bn2.weight", [512]], ["backbone.stage5.0.bn2.bias", [512]], ["backbone.stage5.0.conv3.weight", [2048, 512, 1, 1]], ["backbone.stage5.0.bn3.weight", [2048]], ["backbone.stage5.0.bn3.bias", [2048]], ["backbone.stage5.0.downsample.0.weight", [2048, 1024, 1, 1]], ["backbone.stage5.0.downsample.1.weight", [2048]], ["backbone.stage5.0.downsample.1.bias", [2048]], ["backbone.stage5.1.conv1.weight", [512, 2048, 1, 1]], ["backbone.stage5.1.bn1.weight", [512]], ["backbone.stage5.1.bn1.bias", [512]], ["backbone.stage5.1.conv2.weight", [512, 512, 3, 3]], ["backbone.stage5.1.bn2.weight", [512]], ["backbone.stage5.1.bn2.bias", [512]], ["backbone.stage5.1.conv3.weight", [2048, 512, 1, 1]], ["backbone.stage5.1.bn3.weight", [2048]], ["backbone.stage5.1.bn3.bias", [2048]], ["backbone.stage5.2.conv1.weight", [512, 2048, 1, 1]], ["backbone.stage5.2.bn1.weight", [512]], ["backbone.stage5.2.bn1.bias", [512]], ["backbone.stage5.2.conv2.weight", [512, 512, 3, 3]], ["backbone.stage5.2.bn2.weight", [512]], ["backbone.stage5.2.bn2.bias", [512]], ["backbone.stage5.2.conv3.weight", [2048, 512, 1, 1]], ["backbone.stage5.2.bn3.weight", [2048]], ["backbone.stage5.2.bn3.bias", [2048]], ["backbone.up2.weight", [64, 64, 4, 4]], ["backbone.up2.bias", [64]], ["deconv5.weight", [2048, 256, 4, 4]], ["deconv5.bias", [256]], ["merge4.conv1x1.weight", [128, 1280, 1, 1]], ["merge4.conv1x1.bias", [128]], ["merge4.conv3x3.weight", [128, 128, 3, 3]], ["merge4.conv3x3.bias", [128]], ["merge4.deconv.weight", [128, 128, 4, 4]], ["merge4.deconv.bias", [128]], ["merge3.conv1x1.weight", [64, 640, 1, 1]], ["merge3.conv1x1.bias", [64]], ["merge3.conv3x3.weight", [64, 64, 3, 3]], ["merge3.conv3x3.bias", [64]], ["merge3.deconv.weight", [64, 64, 4, 4]], ["merge3.deconv.bias", [64]], ["merge2.conv1x1.weight", [32, 320, 1, 1]], ["merge2.conv1x1.bias", [32]], ["merge2.conv3x3.weight", [32, 32, 3, 3]], ["merge2.conv3x3.bias", [32]], ["merge2.deconv.weight", [32, 32, 4, 4]], ["merge2.deconv.bias", [32]], ["merge1.conv1x1.weight", [32, 96, 1, 1]], ["merge1.conv1x1.bias", [32]], ["merge1.conv3x3.weight", [32, 32, 3, 3]], ["merge1.conv3x3.bias", [32]], ["merge1.deconv.weight", [32, 32, 4, 4]], ["merge1.deconv.bias", [32]]], "output_shape": [[12, 32, 512, 512], [12, 32, 256, 256], [12, 64, 128, 128], [12, 128, 64, 64], [12, 256, 32, 32]], "num_parameters": [9408, 64, 64, 4096, 64, 64, 36864, 64, 64, 16384, 256, 256, 16384, 256, 256, 16384, 64, 64, 36864, 64, 64, 16384, 256, 256, 16384, 64, 64, 36864, 64, 64, 16384, 256, 256, 32768, 128, 128, 147456, 128, 128, 65536, 512, 512, 131072, 512, 512, 65536, 128, 128, 147456, 128, 128, 65536, 512, 512, 65536, 128, 128, 147456, 128, 128, 65536, 512, 512, 65536, 128, 128, 147456, 128, 128, 65536, 512, 512, 131072, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 524288, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 524288, 512, 512, 2359296, 512, 512, 1048576, 2048, 2048, 2097152, 2048, 2048, 1048576, 512, 512, 2359296, 512, 512, 1048576, 2048, 2048, 1048576, 512, 512, 2359296, 512, 512, 1048576, 2048, 2048, 65536, 64, 8388608, 256, 163840, 128, 147456, 128, 262144, 128, 40960, 64, 36864, 64, 65536, 64, 10240, 32, 9216, 32, 16384, 32, 3072, 32, 9216, 32, 16384, 32]}, {"name": "seg_head.0", "id": 140502207728496, "class_name": "Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))", "parameters": [["weight", [16, 32, 3, 3]], ["bias", [16]]], "output_shape": [[12, 16, 512, 512]], "num_parameters": [4608, 16]}, {"name": "seg_head.1", "id": 140502138130840, "class_name": "PReLU(num_parameters=1)", "parameters": [["weight", [1]]], "output_shape": [[12, 16, 512, 512]], "num_parameters": [1]}, {"name": "seg_head.2", "id": 140502138130672, "class_name": "Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))", "parameters": [["weight", [16, 16, 3, 3]], ["bias", [16]]], "output_shape": [[12, 16, 512, 512]], "num_parameters": [2304, 16]}, {"name": "seg_head.3", "id": 140502138130504, "class_name": "PReLU(num_parameters=1)", "parameters": [["weight", [1]]], "output_shape": [[12, 16, 512, 512]], "num_parameters": [1]}, {"name": "seg_head.4", "id": 140502138130896, "class_name": "Conv2d(16, 4, kernel_size=(1, 1), stride=(1, 1))", "parameters": [["weight", [4, 16, 1, 1]], ["bias", [4]]], "output_shape": [[12, 4, 512, 512]], "num_parameters": [64, 4]}, {"name": "BPN", "id": 140502138131008, "class_name": "Evolution(\n  (evolve_gcn0): GCN_RNN(\n    (bn0): BatchNorm1d(36, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    (conv1): Conv1d(36, 128, kernel_size=(1,), stride=(1,))\n    (rnn): LSTM(36, 128, bidirectional=True)\n    (gconv1): GraphConv(\n      (agg): MeanAggregator()\n    )\n    (gconv2): GraphConv(\n      (agg): MeanAggregator()\n    )\n    (gconv3): GraphConv(\n      (agg): MeanAggregator()\n    )\n    (gconv4): GraphConv(\n      (agg): MeanAggregator()\n    )\n    (prediction): Sequential(\n      (0): Conv1d(512, 128, kernel_size=(1,), stride=(1,))\n      (1): ReLU(inplace=True)\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Conv1d(128, 64, kernel_size=(1,), stride=(1,))\n      (4): ReLU(inplace=True)\n      (5): Dropout(p=0.1, inplace=False)\n      (6): Conv1d(64, 2, kernel_size=(1,), stride=(1,))\n    )\n  )\n  (evolve_gcn1): GCN_RNN(\n    (bn0): BatchNorm1d(36, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    (conv1): Conv1d(36, 128, kernel_size=(1,), stride=(1,))\n    (rnn): LSTM(36, 128, bidirectional=True)\n    (gconv1): GraphConv(\n      (agg): MeanAggregator()\n    )\n    (gconv2): GraphConv(\n      (agg): MeanAggregator()\n    )\n    (gconv3): GraphConv(\n      (agg): MeanAggregator()\n    )\n    (gconv4): GraphConv(\n      (agg): MeanAggregator()\n    )\n    (prediction): Sequential(\n      (0): Conv1d(512, 128, kernel_size=(1,), stride=(1,))\n      (1): ReLU(inplace=True)\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Conv1d(128, 64, kernel_size=(1,), stride=(1,))\n      (4): ReLU(inplace=True)\n      (5): Dropout(p=0.1, inplace=False)\n      (6): Conv1d(64, 2, kernel_size=(1,), stride=(1,))\n    )\n  )\n  (evolve_gcn2): GCN_RNN(\n    (bn0): BatchNorm1d(36, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)\n    (conv1): Conv1d(36, 128, kernel_size=(1,), stride=(1,))\n    (rnn): LSTM(36, 128, bidirectional=True)\n    (gconv1): GraphConv(\n      (agg): MeanAggregator()\n    )\n    (gconv2): GraphConv(\n      (agg): MeanAggregator()\n    )\n    (gconv3): GraphConv(\n      (agg): MeanAggregator()\n    )\n    (gconv4): GraphConv(\n      (agg): MeanAggregator()\n    )\n    (prediction): Sequential(\n      (0): Conv1d(512, 128, kernel_size=(1,), stride=(1,))\n      (1): ReLU(inplace=True)\n      (2): Dropout(p=0.1, inplace=False)\n      (3): Conv1d(128, 64, kernel_size=(1,), stride=(1,))\n      (4): ReLU(inplace=True)\n      (5): Dropout(p=0.1, inplace=False)\n      (6): Conv1d(64, 2, kernel_size=(1,), stride=(1,))\n    )\n  )\n)", "parameters": [["evolve_gcn0.conv1.weight", [128, 36, 1]], ["evolve_gcn0.conv1.bias", [128]], ["evolve_gcn0.rnn.weight_ih_l0", [512, 36]], ["evolve_gcn0.rnn.weight_hh_l0", [512, 128]], ["evolve_gcn0.rnn.bias_ih_l0", [512]], ["evolve_gcn0.rnn.bias_hh_l0", [512]], ["evolve_gcn0.rnn.weight_ih_l0_reverse", [512, 36]], ["evolve_gcn0.rnn.weight_hh_l0_reverse", [512, 128]], ["evolve_gcn0.rnn.bias_ih_l0_reverse", [512]], ["evolve_gcn0.rnn.bias_hh_l0_reverse", [512]], ["evolve_gcn0.gconv1.weight", [72, 256]], ["evolve_gcn0.gconv1.bias", [256]], ["evolve_gcn0.gconv2.weight", [512, 1024]], ["evolve_gcn0.gconv2.bias", [1024]], ["evolve_gcn0.gconv3.weight", [2048, 512]], ["evolve_gcn0.gconv3.bias", [512]], ["evolve_gcn0.gconv4.weight", [1024, 128]], ["evolve_gcn0.gconv4.bias", [128]], ["evolve_gcn0.prediction.0.weight", [128, 512, 1]], ["evolve_gcn0.prediction.0.bias", [128]], ["evolve_gcn0.prediction.3.weight", [64, 128, 1]], ["evolve_gcn0.prediction.3.bias", [64]], ["evolve_gcn0.prediction.6.weight", [2, 64, 1]], ["evolve_gcn0.prediction.6.bias", [2]], ["evolve_gcn1.conv1.weight", [128, 36, 1]], ["evolve_gcn1.conv1.bias", [128]], ["evolve_gcn1.rnn.weight_ih_l0", [512, 36]], ["evolve_gcn1.rnn.weight_hh_l0", [512, 128]], ["evolve_gcn1.rnn.bias_ih_l0", [512]], ["evolve_gcn1.rnn.bias_hh_l0", [512]], ["evolve_gcn1.rnn.weight_ih_l0_reverse", [512, 36]], ["evolve_gcn1.rnn.weight_hh_l0_reverse", [512, 128]], ["evolve_gcn1.rnn.bias_ih_l0_reverse", [512]], ["evolve_gcn1.rnn.bias_hh_l0_reverse", [512]], ["evolve_gcn1.gconv1.weight", [72, 256]], ["evolve_gcn1.gconv1.bias", [256]], ["evolve_gcn1.gconv2.weight", [512, 1024]], ["evolve_gcn1.gconv2.bias", [1024]], ["evolve_gcn1.gconv3.weight", [2048, 512]], ["evolve_gcn1.gconv3.bias", [512]], ["evolve_gcn1.gconv4.weight", [1024, 128]], ["evolve_gcn1.gconv4.bias", [128]], ["evolve_gcn1.prediction.0.weight", [128, 512, 1]], ["evolve_gcn1.prediction.0.bias", [128]], ["evolve_gcn1.prediction.3.weight", [64, 128, 1]], ["evolve_gcn1.prediction.3.bias", [64]], ["evolve_gcn1.prediction.6.weight", [2, 64, 1]], ["evolve_gcn1.prediction.6.bias", [2]], ["evolve_gcn2.conv1.weight", [128, 36, 1]], ["evolve_gcn2.conv1.bias", [128]], ["evolve_gcn2.rnn.weight_ih_l0", [512, 36]], ["evolve_gcn2.rnn.weight_hh_l0", [512, 128]], ["evolve_gcn2.rnn.bias_ih_l0", [512]], ["evolve_gcn2.rnn.bias_hh_l0", [512]], ["evolve_gcn2.rnn.weight_ih_l0_reverse", [512, 36]], ["evolve_gcn2.rnn.weight_hh_l0_reverse", [512, 128]], ["evolve_gcn2.rnn.bias_ih_l0_reverse", [512]], ["evolve_gcn2.rnn.bias_hh_l0_reverse", [512]], ["evolve_gcn2.gconv1.weight", [72, 256]], ["evolve_gcn2.gconv1.bias", [256]], ["evolve_gcn2.gconv2.weight", [512, 1024]], ["evolve_gcn2.gconv2.bias", [1024]], ["evolve_gcn2.gconv3.weight", [2048, 512]], ["evolve_gcn2.gconv3.bias", [512]], ["evolve_gcn2.gconv4.weight", [1024, 128]], ["evolve_gcn2.gconv4.bias", [128]], ["evolve_gcn2.prediction.0.weight", [128, 512, 1]], ["evolve_gcn2.prediction.0.bias", [128]], ["evolve_gcn2.prediction.3.weight", [64, 128, 1]], ["evolve_gcn2.prediction.3.bias", [64]], ["evolve_gcn2.prediction.6.weight", [2, 64, 1]], ["evolve_gcn2.prediction.6.bias", [2]]], "output_shape": [[[37, 20, 2], [37, 20, 2], [37, 20, 2]], [37, 20, 2], [[37], [37]]], "num_parameters": [4608, 128, 18432, 65536, 512, 512, 18432, 65536, 512, 512, 18432, 256, 524288, 1024, 1048576, 512, 131072, 128, 65536, 128, 8192, 64, 128, 2, 4608, 128, 18432, 65536, 512, 512, 18432, 65536, 512, 512, 18432, 256, 524288, 1024, 1048576, 512, 131072, 128, 65536, 128, 8192, 64, 128, 2, 4608, 128, 18432, 65536, 512, 512, 18432, 65536, 512, 512, 18432, 256, 524288, 1024, 1048576, 512, 131072, 128, 65536, 128, 8192, 64, 128, 2]}], "edges": []}